services:
  timescaledb:
    #image: timescale/timescaledb:2.14.2-pg16
    #container_name: timescaledb
    build: 
      context: timescaledb
      dockerfile: Dockerfile
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "8888:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  redis-stack:
    image: redis/redis-stack:latest
    container_name: redis-stack
    ports:
      - "6379:6379"
      - "8001:8001"  # net stop winnat will probably be required under windows
    volumes:
      - redis-data:/root/redis
      - ./redis/config/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_ARGS=--requirepass ${REDIS_PASSWORD} --user ${REDIS_USERNAME} on >password &* ~* allcommands --user default off nopass nocommands
    restart: unless-stopped

  wait-for-pg:
    image: atkrad/wait4x
    depends_on:
      - timescaledb
    command: postgresql 'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/postgres?sslmode=disable' --timeout 90s --interval 250ms

  wait-for-redis:
    image: atkrad/wait4x
    depends_on:
      - redis-stack
    command: redis redis://${REDIS_USERNAME}:${REDIS_PASSWORD}@redis-stack:6379/0 --timeout 90s --interval 250ms

  bemserver-api:
    build: 
      context: bemserver-api
      dockerfile: Dockerfile
    depends_on:
      wait-for-pg:
        condition: service_completed_successfully
      wait-for-redis:
        condition: service_completed_successfully
    volumes:
      - ./bemserver-api/config:/config
    ports:
      - "5000:5000"
      #- "5555:5555"  # Celery Flower
    restart: unless-stopped
    environment:
      - FLASK_RUN_HOST=0.0.0.0
      - FLASK_RUN_PORT=5000
      - FLASK_APP=/app/app.py
      - FLASK_ENV=development  # development, production
      - BEMSERVER_NAME=${BEMSERVER_NAME}
      - BEMSERVER_EMAIL=${BEMSERVER_EMAIL}
      - BEMSERVER_CORE_SETTINGS_FILE=/config/bemserver-core-settings.py
      - BEMSERVER_CELERY_SETTINGS_FILE=/config/bemserver-celery-settings.py
      - SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/bemserver
      - WEATHER_DATA_CLIENT_API_KEY=${WEATHER_DATA_CLIENT_API_KEY}
      - APP=${CELERY_WORKER_NAME}
      - BROKER_URL=${CELERY_BROKER_URL}
      - RESULT_BACKEND=${CELERY_RESULT_BACKEND}

  wait-for-bemserver-api:
    image: atkrad/wait4x
    depends_on:
      - bemserver-api
    command:  http http://bemserver-api:5000 --expect-status-code 200 --timeout 90s --interval 1s

  bemserver-ui:
    build: 
      context: bemserver-ui
      dockerfile: Dockerfile
    depends_on:
      wait-for-bemserver-api:
        condition: service_completed_successfully
    volumes:
      - ./bemserver-ui/config:/config
    ports:
      - "5001:5001"
    restart: unless-stopped
    environment:
      - FLASK_RUN_HOST=0.0.0.0
      - FLASK_RUN_PORT=5001
      - FLASK_APP=/app/app.py
      - FLASK_ENV=development  # development, production
      - BEMSERVER_UI_SETTINGS_FILE=/config/bemserver-ui.cfg
      - BEMSERVER_API_HOST=bemserver-api:5000
      - BEMSERVER_API_USE_SSL=0

  celery-worker:
    build: 
      context: bemserver-api
      dockerfile: Dockerfile
    restart: unless-stopped
    entrypoint: /app/start-celery-worker.sh
    volumes:
      - ./bemserver-api/config:/config
    environment:
      - FLASK_APP=/app/app.py
      - BEMSERVER_CORE_SETTINGS_FILE=/config/bemserver-core-settings.py
      - BEMSERVER_CELERY_SETTINGS_FILE=/config/bemserver-celery-settings.py
      - APP=${CELERY_WORKER_NAME}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - bemserver-api

  celery-beat:
    build: 
      context: bemserver-api
      dockerfile: Dockerfile
    restart: unless-stopped
    entrypoint: /app/start-celery-beat.sh
    environment:
      - FLASK_APP=/app/app.py
      - APP=${CELERY_WORKER_NAME}
      - BROKER_URL=${CELERY_BROKER_URL}
      - RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - bemserver-api

  celery-flower:
    build: 
      context: bemserver-api
      dockerfile: Dockerfile
    ports:
      - 5555:5555
    restart: unless-stopped
    entrypoint: /app/start-celery-flower.sh
    environment:
      - APP=${CELERY_WORKER_NAME}
      - BROKER_URL=${CELERY_BROKER_URL}
      - RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - celery-worker
      - redis-stack

volumes:
  postgres-data:
  pgadmin-data:
  redis-data:
