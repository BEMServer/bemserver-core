"""v0.11

Revision ID: 0.11
Revises: 0.10
Create Date: 2023-03-01 16:47:45.342139

"""
import enum

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = "0.11"
down_revision = "0.10"
branch_labels = None
depends_on = None


class WeatherParameterEnum(enum.Enum):
    AIR_TEMPERATURE = "air temperature"
    DEWPOINT_TEMPERATURE = "dewpoint temperature"
    WETBULB_TEMPERATURE = "wetbulb temperature"
    WIND_SPEED = "wind speed"
    WIND_DIRECTION = "wind direction"
    SURFACE_SOLAR_RADIATION = "surface solar radiation"
    DIRECT_NORMAL_SOLAR_RADIATION = "direct normal solar radiation"
    RELATIVE_HUMIDITY = "relative humidity"
    SURFACE_PRESSURE = "surface pressure"
    TOTAL_PRECIPITATION = "total precipitation"


ener_prod_techs_table = sa.sql.table(
    "ener_prod_techs",
    sa.sql.column("id", sa.Integer),
    sa.sql.column("name", sa.String),
)


def upgrade():
    weather_parameter = postgresql.ENUM(
        WeatherParameterEnum, name="weatherparameterenum"
    )

    # Rename table energy_sources -> energies
    op.rename_table("ener_sources", "energies")
    op.execute("ALTER SEQUENCE ener_sources_id_seq RENAME TO energies_id_seq")
    op.execute("ALTER INDEX pk_ener_sources RENAME TO pk_energies")
    op.execute(
        "ALTER TABLE energies "
        "RENAME CONSTRAINT uq_ener_sources_name TO uq_energies_name"
    )

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ener_prod_techs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ener_prod_techs")),
        sa.UniqueConstraint("name", name=op.f("uq_ener_prod_techs_name")),
    )
    op.create_table(
        "ener_prod_ts_by_building",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("building_id", sa.Integer(), nullable=False),
        sa.Column("energy_id", sa.Integer(), nullable=False),
        sa.Column("prod_tech_id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["building_id"],
            ["buildings.id"],
            name=op.f("fk_ener_prod_ts_by_building_building_id_buildings"),
        ),
        sa.ForeignKeyConstraint(
            ["energy_id"],
            ["energies.id"],
            name=op.f("fk_ener_prod_ts_by_building_energy_id_energies"),
        ),
        sa.ForeignKeyConstraint(
            ["prod_tech_id"],
            ["ener_prod_techs.id"],
            name=op.f("fk_ener_prod_ts_by_building_prod_tech_id_ener_prod_techs"),
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_ener_prod_ts_by_building_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ener_prod_ts_by_building")),
        sa.UniqueConstraint(
            "building_id",
            "energy_id",
            "prod_tech_id",
            name=op.f("uq_ener_prod_ts_by_building_building_id"),
        ),
    )
    op.create_table(
        "ener_prod_ts_by_site",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("site_id", sa.Integer(), nullable=False),
        sa.Column("energy_id", sa.Integer(), nullable=False),
        sa.Column("prod_tech_id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["energy_id"],
            ["energies.id"],
            name=op.f("fk_ener_prod_ts_by_site_energy_id_energies"),
        ),
        sa.ForeignKeyConstraint(
            ["prod_tech_id"],
            ["ener_prod_techs.id"],
            name=op.f("fk_ener_prod_ts_by_site_prod_tech_id_ener_prod_techs"),
        ),
        sa.ForeignKeyConstraint(
            ["site_id"],
            ["sites.id"],
            name=op.f("fk_ener_prod_ts_by_site_site_id_sites"),
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_ener_prod_ts_by_site_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ener_prod_ts_by_site")),
        sa.UniqueConstraint(
            "site_id",
            "energy_id",
            "prod_tech_id",
            name=op.f("uq_ener_prod_ts_by_site_site_id"),
        ),
    )
    op.create_table(
        "weather_ts_by_site",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("site_id", sa.Integer(), nullable=False),
        sa.Column("parameter", weather_parameter, nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["site_id"], ["sites.id"], name=op.f("fk_weather_ts_by_site_site_id_sites")
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_weather_ts_by_site_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_weather_ts_by_site")),
        sa.UniqueConstraint(
            "site_id", "parameter", name=op.f("uq_weather_ts_by_site_site_id")
        ),
    )
    # ### end Alembic commands ###

    op.alter_column(
        "ener_cons_ts_by_building",
        "source_id",
        new_column_name="energy_id",
        existing_type=sa.Integer,
    )
    op.drop_constraint(
        "uq_ener_cons_ts_by_building_building_id",
        "ener_cons_ts_by_building",
        type_="unique",
    )
    op.create_unique_constraint(
        op.f("uq_ener_cons_ts_by_building_building_id"),
        "ener_cons_ts_by_building",
        ["building_id", "energy_id", "end_use_id"],
    )
    op.drop_constraint(
        "fk_ener_cons_ts_by_building_source_id_ener_sources",
        "ener_cons_ts_by_building",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_ener_cons_ts_by_building_energy_id_energies"),
        "ener_cons_ts_by_building",
        "energies",
        ["energy_id"],
        ["id"],
    )

    op.alter_column(
        "ener_cons_ts_by_site",
        "source_id",
        new_column_name="energy_id",
        existing_type=sa.Integer,
    )
    op.drop_constraint(
        "uq_ener_cons_ts_by_site_site_id", "ener_cons_ts_by_site", type_="unique"
    )
    op.create_unique_constraint(
        op.f("uq_ener_cons_ts_by_site_site_id"),
        "ener_cons_ts_by_site",
        ["site_id", "energy_id", "end_use_id"],
    )
    op.drop_constraint(
        "fk_ener_cons_ts_by_site_source_id_ener_sources",
        "ener_cons_ts_by_site",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_ener_cons_ts_by_site_energy_id_energies"),
        "ener_cons_ts_by_site",
        "energies",
        ["energy_id"],
        ["id"],
    )

    op.bulk_insert(
        ener_prod_techs_table,
        [
            {"name": "all"},
            {"name": "PV panels"},
            {"name": "wind turbines"},
            {"name": "solar thermal collectors"},
        ],
    )


def downgrade():
    op.rename_table("energies", "ener_sources")
    op.execute("ALTER SEQUENCE energies_id_seq RENAME TO ener_sources_id_seq")
    op.execute("ALTER INDEX pk_energies RENAME TO pk_ener_sources")
    op.execute(
        "ALTER TABLE ener_sources "
        "RENAME CONSTRAINT uq_energies_name TO uq_ener_sources_name"
    )

    op.alter_column(
        "ener_cons_ts_by_building",
        "energy_id",
        new_column_name="source_id",
        existing_type=sa.Integer,
    )
    op.drop_constraint(
        "uq_ener_cons_ts_by_building_building_id",
        "ener_cons_ts_by_building",
        type_="unique",
    )
    op.create_unique_constraint(
        op.f("uq_ener_cons_ts_by_building_building_id"),
        "ener_cons_ts_by_building",
        ["building_id", "source_id", "end_use_id"],
    )
    op.drop_constraint(
        "fk_ener_cons_ts_by_building_energy_id_energies",
        "ener_cons_ts_by_building",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_ener_cons_ts_by_building_source_id_ener_sources"),
        "ener_cons_ts_by_building",
        "ener_sources",
        ["source_id"],
        ["id"],
    )

    op.alter_column(
        "ener_cons_ts_by_site",
        "energy_id",
        new_column_name="source_id",
        existing_type=sa.Integer,
    )
    op.drop_constraint(
        "uq_ener_cons_ts_by_site_site_id", "ener_cons_ts_by_site", type_="unique"
    )
    op.create_unique_constraint(
        op.f("uq_ener_cons_ts_by_site_site_id"),
        "ener_cons_ts_by_site",
        ["site_id", "source_id", "end_use_id"],
    )
    op.drop_constraint(
        "fk_ener_cons_ts_by_site_energy_id_energies",
        "ener_cons_ts_by_site",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_ener_cons_ts_by_site_source_id_ener_sources"),
        "ener_cons_ts_by_site",
        "ener_sources",
        ["source_id"],
        ["id"],
    )

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("weather_ts_by_site")
    op.drop_table("ener_prod_ts_by_site")
    op.drop_table("ener_prod_ts_by_building")
    op.drop_table("ener_prod_techs")
    # ### end Alembic commands ###

    weather_parameter = postgresql.ENUM(
        WeatherParameterEnum, name="weatherparameterenum"
    )
    weather_parameter.drop(op.get_bind())
