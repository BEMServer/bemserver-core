"""v0.1

Revision ID: 0.1
Revises:
Create Date: 2022-11-17 15:06:53.855818

"""
from textwrap import dedent

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "0.1"
down_revision = None
branch_labels = None
depends_on = None


def gen_ddl_trigger_ro(table_name, col_name):
    return sa.DDL(
        dedent(
            f"""
            CREATE TRIGGER
                {table_name}_trigger_update_readonly_{col_name}
            BEFORE UPDATE
                OF {col_name} ON {table_name}
            FOR EACH ROW
                WHEN (
                    NEW.{col_name} IS DISTINCT FROM OLD.{col_name}
                )
                EXECUTE FUNCTION column_update_not_allowed({col_name});
            """
        )
    )


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "campaigns",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("start_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("end_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("timezone", sa.String(length=40), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_campaigns")),
        sa.UniqueConstraint("name", name=op.f("uq_campaigns_name")),
    )
    op.create_table(
        "ener_end_uses",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ener_end_uses")),
        sa.UniqueConstraint("name", name=op.f("uq_ener_end_uses_name")),
    )
    op.create_table(
        "ener_sources",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ener_sources")),
        sa.UniqueConstraint("name", name=op.f("uq_ener_sources_name")),
    )
    op.create_table(
        "struct_elem_props",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column(
            "value_type",
            sa.Enum("integer", "float", "boolean", "string", name="propertytype"),
            nullable=False,
        ),
        sa.Column("unit_symbol", sa.String(length=20), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_struct_elem_props")),
        sa.UniqueConstraint("name", name=op.f("uq_struct_elem_props_name")),
    )
    op.create_table(
        "ts_data_states",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ts_data_states")),
        sa.UniqueConstraint("name", name=op.f("uq_ts_data_states_name")),
    )
    op.create_table(
        "ts_props",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=250), nullable=True),
        sa.Column(
            "value_type",
            sa.Enum("integer", "float", "boolean", "string", name="propertytype"),
            nullable=False,
        ),
        sa.Column("unit_symbol", sa.String(length=20), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ts_props")),
        sa.UniqueConstraint("name", name=op.f("uq_ts_props_name")),
    )
    op.create_table(
        "u_groups",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_u_groups")),
        sa.UniqueConstraint("name", name=op.f("uq_u_groups_name")),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("email", sa.String(length=80), nullable=False),
        sa.Column("password", sa.String(length=200), nullable=False),
        sa.Column("_is_admin", sa.Boolean(), nullable=False),
        sa.Column("_is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint("email", name=op.f("uq_users_email")),
    )
    op.create_table(
        "building_props",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("struct_elem_prop_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["struct_elem_prop_id"],
            ["struct_elem_props.id"],
            name=op.f("fk_building_props_struct_elem_prop_id_struct_elem_props"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_building_props")),
        sa.UniqueConstraint(
            "struct_elem_prop_id", name=op.f("uq_building_props_struct_elem_prop_id")
        ),
    )
    op.create_table(
        "c_scopes",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("campaign_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_id"],
            ["campaigns.id"],
            name=op.f("fk_c_scopes_campaign_id_campaigns"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_c_scopes")),
        sa.UniqueConstraint(
            "campaign_id", "name", name=op.f("uq_c_scopes_campaign_id")
        ),
    )
    op.create_table(
        "site_props",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("struct_elem_prop_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["struct_elem_prop_id"],
            ["struct_elem_props.id"],
            name=op.f("fk_site_props_struct_elem_prop_id_struct_elem_props"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_site_props")),
        sa.UniqueConstraint(
            "struct_elem_prop_id", name=op.f("uq_site_props_struct_elem_prop_id")
        ),
    )
    op.create_table(
        "sites",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("ifc_id", sa.String(length=22), nullable=True),
        sa.Column("campaign_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_id"],
            ["campaigns.id"],
            name=op.f("fk_sites_campaign_id_campaigns"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_sites")),
        sa.UniqueConstraint("campaign_id", "name", name=op.f("uq_sites_campaign_id")),
    )
    op.create_table(
        "space_props",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("struct_elem_prop_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["struct_elem_prop_id"],
            ["struct_elem_props.id"],
            name=op.f("fk_space_props_struct_elem_prop_id_struct_elem_props"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_space_props")),
        sa.UniqueConstraint(
            "struct_elem_prop_id", name=op.f("uq_space_props_struct_elem_prop_id")
        ),
    )
    op.create_table(
        "st_cleanups_by_campaigns",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("campaign_id", sa.Integer(), nullable=False),
        sa.Column("is_enabled", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_id"],
            ["campaigns.id"],
            name=op.f("fk_st_cleanups_by_campaigns_campaign_id_campaigns"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_st_cleanups_by_campaigns")),
        sa.UniqueConstraint(
            "campaign_id", name=op.f("uq_st_cleanups_by_campaigns_campaign_id")
        ),
    )
    op.create_table(
        "storey_props",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("struct_elem_prop_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["struct_elem_prop_id"],
            ["struct_elem_props.id"],
            name=op.f("fk_storey_props_struct_elem_prop_id_struct_elem_props"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_storey_props")),
        sa.UniqueConstraint(
            "struct_elem_prop_id", name=op.f("uq_storey_props_struct_elem_prop_id")
        ),
    )
    op.create_table(
        "u_groups_by_campaigns",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("campaign_id", sa.Integer(), nullable=False),
        sa.Column("user_group_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_id"],
            ["campaigns.id"],
            name=op.f("fk_u_groups_by_campaigns_campaign_id_campaigns"),
        ),
        sa.ForeignKeyConstraint(
            ["user_group_id"],
            ["u_groups.id"],
            name=op.f("fk_u_groups_by_campaigns_user_group_id_u_groups"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_u_groups_by_campaigns")),
        sa.UniqueConstraint(
            "campaign_id",
            "user_group_id",
            name=op.f("uq_u_groups_by_campaigns_campaign_id"),
        ),
    )
    op.create_table(
        "users_by_u_groups",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("user_group_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_group_id"],
            ["u_groups.id"],
            name=op.f("fk_users_by_u_groups_user_group_id_u_groups"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_users_by_u_groups_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users_by_u_groups")),
        sa.UniqueConstraint(
            "user_id", "user_group_id", name=op.f("uq_users_by_u_groups_user_id")
        ),
    )
    op.create_table(
        "zone_props",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("struct_elem_prop_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["struct_elem_prop_id"],
            ["struct_elem_props.id"],
            name=op.f("fk_zone_props_struct_elem_prop_id_struct_elem_props"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_zone_props")),
        sa.UniqueConstraint(
            "struct_elem_prop_id", name=op.f("uq_zone_props_struct_elem_prop_id")
        ),
    )
    op.create_table(
        "zones",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("ifc_id", sa.String(length=22), nullable=True),
        sa.Column("campaign_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_id"],
            ["campaigns.id"],
            name=op.f("fk_zones_campaign_id_campaigns"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_zones")),
        sa.UniqueConstraint("campaign_id", "name", name=op.f("uq_zones_campaign_id")),
    )
    op.create_table(
        "buildings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("ifc_id", sa.String(length=22), nullable=True),
        sa.Column("site_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["site_id"], ["sites.id"], name=op.f("fk_buildings_site_id_sites")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_buildings")),
        sa.UniqueConstraint("site_id", "name", name=op.f("uq_buildings_site_id")),
    )
    op.create_table(
        "site_prop_data",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("site_id", sa.Integer(), nullable=False),
        sa.Column("site_prop_id", sa.Integer(), nullable=False),
        sa.Column("value", sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(
            ["site_id"], ["sites.id"], name=op.f("fk_site_prop_data_site_id_sites")
        ),
        sa.ForeignKeyConstraint(
            ["site_prop_id"],
            ["site_props.id"],
            name=op.f("fk_site_prop_data_site_prop_id_site_props"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_site_prop_data")),
        sa.UniqueConstraint(
            "site_id", "site_prop_id", name=op.f("uq_site_prop_data_site_id")
        ),
    )
    op.create_table(
        "timeseries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("unit_symbol", sa.String(length=20), nullable=True),
        sa.Column("campaign_id", sa.Integer(), nullable=False),
        sa.Column("campaign_scope_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_id"],
            ["campaigns.id"],
            name=op.f("fk_timeseries_campaign_id_campaigns"),
        ),
        sa.ForeignKeyConstraint(
            ["campaign_scope_id"],
            ["c_scopes.id"],
            name=op.f("fk_timeseries_campaign_scope_id_c_scopes"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_timeseries")),
        sa.UniqueConstraint(
            "campaign_id", "name", name=op.f("uq_timeseries_campaign_id")
        ),
    )
    op.create_table(
        "u_groups_by_c_scopes",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("campaign_scope_id", sa.Integer(), nullable=False),
        sa.Column("user_group_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_scope_id"],
            ["c_scopes.id"],
            name=op.f("fk_u_groups_by_c_scopes_campaign_scope_id_c_scopes"),
        ),
        sa.ForeignKeyConstraint(
            ["user_group_id"],
            ["u_groups.id"],
            name=op.f("fk_u_groups_by_c_scopes_user_group_id_u_groups"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_u_groups_by_c_scopes")),
        sa.UniqueConstraint(
            "campaign_scope_id",
            "user_group_id",
            name=op.f("uq_u_groups_by_c_scopes_campaign_scope_id"),
        ),
    )
    op.create_table(
        "zone_prop_data",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("zone_id", sa.Integer(), nullable=False),
        sa.Column("zone_prop_id", sa.Integer(), nullable=False),
        sa.Column("value", sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(
            ["zone_id"], ["zones.id"], name=op.f("fk_zone_prop_data_zone_id_zones")
        ),
        sa.ForeignKeyConstraint(
            ["zone_prop_id"],
            ["zone_props.id"],
            name=op.f("fk_zone_prop_data_zone_prop_id_zone_props"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_zone_prop_data")),
        sa.UniqueConstraint(
            "zone_id", "zone_prop_id", name=op.f("uq_zone_prop_data_zone_id")
        ),
    )
    op.create_table(
        "building_prop_data",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("building_id", sa.Integer(), nullable=False),
        sa.Column("building_prop_id", sa.Integer(), nullable=False),
        sa.Column("value", sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(
            ["building_id"],
            ["buildings.id"],
            name=op.f("fk_building_prop_data_building_id_buildings"),
        ),
        sa.ForeignKeyConstraint(
            ["building_prop_id"],
            ["building_props.id"],
            name=op.f("fk_building_prop_data_building_prop_id_building_props"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_building_prop_data")),
        sa.UniqueConstraint(
            "building_id",
            "building_prop_id",
            name=op.f("uq_building_prop_data_building_id"),
        ),
    )
    op.create_table(
        "ener_cons_ts_by_building",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("building_id", sa.Integer(), nullable=False),
        sa.Column("source_id", sa.Integer(), nullable=False),
        sa.Column("end_use_id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.Column("wh_conversion_factor", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["building_id"],
            ["buildings.id"],
            name=op.f("fk_ener_cons_ts_by_building_building_id_buildings"),
        ),
        sa.ForeignKeyConstraint(
            ["end_use_id"],
            ["ener_end_uses.id"],
            name=op.f("fk_ener_cons_ts_by_building_end_use_id_ener_end_uses"),
        ),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["ener_sources.id"],
            name=op.f("fk_ener_cons_ts_by_building_source_id_ener_sources"),
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_ener_cons_ts_by_building_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ener_cons_ts_by_building")),
        sa.UniqueConstraint(
            "building_id",
            "source_id",
            "end_use_id",
            name=op.f("uq_ener_cons_ts_by_building_building_id"),
        ),
    )
    op.create_table(
        "ener_cons_ts_by_site",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("site_id", sa.Integer(), nullable=False),
        sa.Column("source_id", sa.Integer(), nullable=False),
        sa.Column("end_use_id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.Column("wh_conversion_factor", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["end_use_id"],
            ["ener_end_uses.id"],
            name=op.f("fk_ener_cons_ts_by_site_end_use_id_ener_end_uses"),
        ),
        sa.ForeignKeyConstraint(
            ["site_id"],
            ["sites.id"],
            name=op.f("fk_ener_cons_ts_by_site_site_id_sites"),
        ),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["ener_sources.id"],
            name=op.f("fk_ener_cons_ts_by_site_source_id_ener_sources"),
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_ener_cons_ts_by_site_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ener_cons_ts_by_site")),
        sa.UniqueConstraint(
            "site_id",
            "source_id",
            "end_use_id",
            name=op.f("uq_ener_cons_ts_by_site_site_id"),
        ),
    )
    op.create_table(
        "st_cleanups_by_ts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.Column("last_timestamp", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_st_cleanups_by_ts_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_st_cleanups_by_ts")),
        sa.UniqueConstraint(
            "timeseries_id", name=op.f("uq_st_cleanups_by_ts_timeseries_id")
        ),
    )
    op.create_table(
        "storeys",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("ifc_id", sa.String(length=22), nullable=True),
        sa.Column("building_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["building_id"],
            ["buildings.id"],
            name=op.f("fk_storeys_building_id_buildings"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_storeys")),
        sa.UniqueConstraint("building_id", "name", name=op.f("uq_storeys_building_id")),
    )
    op.create_table(
        "timeseries_by_zones",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.Column("zone_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_timeseries_by_zones_timeseries_id_timeseries"),
        ),
        sa.ForeignKeyConstraint(
            ["zone_id"], ["zones.id"], name=op.f("fk_timeseries_by_zones_zone_id_zones")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_timeseries_by_zones")),
        sa.UniqueConstraint(
            "zone_id", "timeseries_id", name=op.f("uq_timeseries_by_zones_zone_id")
        ),
    )
    op.create_table(
        "ts_by_buildings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.Column("building_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["building_id"],
            ["buildings.id"],
            name=op.f("fk_ts_by_buildings_building_id_buildings"),
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_ts_by_buildings_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ts_by_buildings")),
        sa.UniqueConstraint(
            "building_id", "timeseries_id", name=op.f("uq_ts_by_buildings_building_id")
        ),
    )
    op.create_table(
        "ts_by_data_states",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.Column("data_state_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["data_state_id"],
            ["ts_data_states.id"],
            name=op.f("fk_ts_by_data_states_data_state_id_ts_data_states"),
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_ts_by_data_states_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ts_by_data_states")),
        sa.UniqueConstraint(
            "timeseries_id",
            "data_state_id",
            name=op.f("uq_ts_by_data_states_timeseries_id"),
        ),
    )
    op.create_table(
        "ts_by_sites",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.Column("site_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["site_id"], ["sites.id"], name=op.f("fk_ts_by_sites_site_id_sites")
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_ts_by_sites_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ts_by_sites")),
        sa.UniqueConstraint(
            "site_id", "timeseries_id", name=op.f("uq_ts_by_sites_site_id")
        ),
    )
    op.create_table(
        "ts_prop_data",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.Column("property_id", sa.Integer(), nullable=False),
        sa.Column("value", sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(
            ["property_id"],
            ["ts_props.id"],
            name=op.f("fk_ts_prop_data_property_id_ts_props"),
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_ts_prop_data_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ts_prop_data")),
        sa.UniqueConstraint(
            "timeseries_id", "property_id", name=op.f("uq_ts_prop_data_timeseries_id")
        ),
    )
    op.create_table(
        "spaces",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("ifc_id", sa.String(length=22), nullable=True),
        sa.Column("storey_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["storey_id"], ["storeys.id"], name=op.f("fk_spaces_storey_id_storeys")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_spaces")),
        sa.UniqueConstraint("storey_id", "name", name=op.f("uq_spaces_storey_id")),
    )
    op.create_table(
        "storey_prop_data",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("storey_id", sa.Integer(), nullable=False),
        sa.Column("storey_prop_id", sa.Integer(), nullable=False),
        sa.Column("value", sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(
            ["storey_id"],
            ["storeys.id"],
            name=op.f("fk_storey_prop_data_storey_id_storeys"),
        ),
        sa.ForeignKeyConstraint(
            ["storey_prop_id"],
            ["storey_props.id"],
            name=op.f("fk_storey_prop_data_storey_prop_id_storey_props"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_storey_prop_data")),
        sa.UniqueConstraint(
            "storey_id", "storey_prop_id", name=op.f("uq_storey_prop_data_storey_id")
        ),
    )
    op.create_table(
        "ts_by_storeys",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.Column("storey_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["storey_id"],
            ["storeys.id"],
            name=op.f("fk_ts_by_storeys_storey_id_storeys"),
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_ts_by_storeys_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ts_by_storeys")),
        sa.UniqueConstraint(
            "storey_id", "timeseries_id", name=op.f("uq_ts_by_storeys_storey_id")
        ),
    )
    op.create_table(
        "ts_data",
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("ts_by_data_state_id", sa.Integer(), nullable=False),
        sa.Column("value", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(
            ["ts_by_data_state_id"],
            ["ts_by_data_states.id"],
            name=op.f("fk_ts_data_ts_by_data_state_id_ts_by_data_states"),
        ),
        sa.PrimaryKeyConstraint(
            "ts_by_data_state_id", "timestamp", name=op.f("pk_ts_data")
        ),
    )
    op.create_table(
        "space_prop_data",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("space_id", sa.Integer(), nullable=False),
        sa.Column("space_prop_id", sa.Integer(), nullable=False),
        sa.Column("value", sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(
            ["space_id"], ["spaces.id"], name=op.f("fk_space_prop_data_space_id_spaces")
        ),
        sa.ForeignKeyConstraint(
            ["space_prop_id"],
            ["space_props.id"],
            name=op.f("fk_space_prop_data_space_prop_id_space_props"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_space_prop_data")),
        sa.UniqueConstraint(
            "space_id", "space_prop_id", name=op.f("uq_space_prop_data_space_id")
        ),
    )
    op.create_table(
        "ts_by_spaces",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("timeseries_id", sa.Integer(), nullable=False),
        sa.Column("space_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["space_id"], ["spaces.id"], name=op.f("fk_ts_by_spaces_space_id_spaces")
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name=op.f("fk_ts_by_spaces_timeseries_id_timeseries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ts_by_spaces")),
        sa.UniqueConstraint(
            "space_id", "timeseries_id", name=op.f("uq_ts_by_spaces_space_id")
        ),
    )
    # ### end Alembic commands ###

    op.execute(
        sa.DDL(
            dedent(
                """
                CREATE FUNCTION column_update_not_allowed()
                    RETURNS TRIGGER AS
                $func$
                    DECLARE
                        col_name text := TG_ARGV[0]::text;
                    BEGIN
                        RAISE EXCEPTION USING
                            MESSAGE = col_name || ' cannot be modified',
                            ERRCODE = 'integrity_constraint_violation';
                    END;
                $func$
                LANGUAGE plpgsql STRICT;
                """
            )
        )
    )

    op.execute(gen_ddl_trigger_ro("c_scopes", "campaign_id"))
    op.execute(gen_ddl_trigger_ro("sites", "campaign_id"))
    op.execute(gen_ddl_trigger_ro("buildings", "site_id"))
    op.execute(gen_ddl_trigger_ro("storeys", "building_id"))
    op.execute(gen_ddl_trigger_ro("spaces", "storey_id"))
    op.execute(gen_ddl_trigger_ro("zones", "campaign_id"))
    op.execute(gen_ddl_trigger_ro("struct_elem_props", "value_type"))
    op.execute(gen_ddl_trigger_ro("site_props", "struct_elem_prop_id"))
    op.execute(gen_ddl_trigger_ro("building_props", "struct_elem_prop_id"))
    op.execute(gen_ddl_trigger_ro("storey_props", "struct_elem_prop_id"))
    op.execute(gen_ddl_trigger_ro("space_props", "struct_elem_prop_id"))
    op.execute(gen_ddl_trigger_ro("zone_props", "struct_elem_prop_id"))
    op.execute(gen_ddl_trigger_ro("site_prop_data", "site_id"))
    op.execute(gen_ddl_trigger_ro("site_prop_data", "site_prop_id"))
    op.execute(gen_ddl_trigger_ro("building_prop_data", "building_id"))
    op.execute(gen_ddl_trigger_ro("building_prop_data", "building_prop_id"))
    op.execute(gen_ddl_trigger_ro("storey_prop_data", "storey_id"))
    op.execute(gen_ddl_trigger_ro("storey_prop_data", "storey_prop_id"))
    op.execute(gen_ddl_trigger_ro("space_prop_data", "space_id"))
    op.execute(gen_ddl_trigger_ro("space_prop_data", "space_prop_id"))
    op.execute(gen_ddl_trigger_ro("zone_prop_data", "zone_id"))
    op.execute(gen_ddl_trigger_ro("zone_prop_data", "zone_prop_id"))
    op.execute(gen_ddl_trigger_ro("timeseries", "campaign_id"))
    op.execute(gen_ddl_trigger_ro("timeseries", "campaign_scope_id"))
    op.execute(gen_ddl_trigger_ro("ts_props", "value_type"))
    op.execute(gen_ddl_trigger_ro("ts_prop_data", "timeseries_id"))
    op.execute(gen_ddl_trigger_ro("ts_prop_data", "property_id"))

    ts_props_table = sa.sql.table(
        "ts_props",
        sa.sql.column("id", sa.Integer),
        sa.sql.column("name", sa.String),
        sa.sql.column("description", sa.String),
        sa.sql.column("value_type", sa.Enum),
        sa.sql.column("unit_symbol", sa.String),
    )

    op.bulk_insert(
        ts_props_table,
        [
            {
                "name": "Min",
                "description": "Minimum expected value",
                "value_type": "float",
            },
            {
                "name": "Max",
                "description": "Maximum expected value",
                "value_type": "float",
            },
            {
                "name": "Interval",
                "description": "Expected interval",
                "value_type": "float",
                "unit_symbol": "s",
            },
        ],
        # In multiinsert mode, only fields from first item are actually set.
        multiinsert=False,
    )

    ts_data_states_table = sa.sql.table(
        "ts_data_states",
        sa.sql.column("id", sa.Integer),
        sa.sql.column("name", sa.String),
    )

    op.bulk_insert(
        ts_data_states_table,
        [
            {"name": "Raw"},
            {"name": "Clean"},
        ],
    )

    ener_sources_table = sa.sql.table(
        "ener_sources",
        sa.sql.column("id", sa.Integer),
        sa.sql.column("name", sa.String),
    )

    op.bulk_insert(
        ener_sources_table,
        [
            {"name": "all"},
            {"name": "electricity"},
            {"name": "natural gas"},
            {"name": "propane gas"},
            {"name": "heating oil"},
            {"name": "wood log"},
            {"name": "wood pellet"},
            {"name": "wood chips"},
            {"name": "heating network"},
            {"name": "cooling network"},
        ],
    )

    ener_end_uses_table = sa.sql.table(
        "ener_end_uses",
        sa.sql.column("id", sa.Integer),
        sa.sql.column("name", sa.String),
    )

    op.bulk_insert(
        ener_end_uses_table,
        [
            {"name": "all"},
            {"name": "heating"},
            {"name": "cooling"},
            {"name": "ventilation"},
            {"name": "lighting"},
            {"name": "appliances"},
        ],
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("ts_by_spaces")
    op.drop_table("space_prop_data")
    op.drop_table("ts_data")
    op.drop_table("ts_by_storeys")
    op.drop_table("storey_prop_data")
    op.drop_table("spaces")
    op.drop_table("ts_prop_data")
    op.drop_table("ts_by_sites")
    op.drop_table("ts_by_data_states")
    op.drop_table("ts_by_buildings")
    op.drop_table("timeseries_by_zones")
    op.drop_table("storeys")
    op.drop_table("st_cleanups_by_ts")
    op.drop_table("ener_cons_ts_by_site")
    op.drop_table("ener_cons_ts_by_building")
    op.drop_table("building_prop_data")
    op.drop_table("zone_prop_data")
    op.drop_table("u_groups_by_c_scopes")
    op.drop_table("timeseries")
    op.drop_table("site_prop_data")
    op.drop_table("buildings")
    op.drop_table("zones")
    op.drop_table("zone_props")
    op.drop_table("users_by_u_groups")
    op.drop_table("u_groups_by_campaigns")
    op.drop_table("storey_props")
    op.drop_table("st_cleanups_by_campaigns")
    op.drop_table("space_props")
    op.drop_table("sites")
    op.drop_table("site_props")
    op.drop_table("c_scopes")
    op.drop_table("building_props")
    op.drop_table("users")
    op.drop_table("u_groups")
    op.drop_table("ts_props")
    op.drop_table("ts_data_states")
    op.drop_table("struct_elem_props")
    op.drop_table("ener_sources")
    op.drop_table("ener_end_uses")
    op.drop_table("campaigns")
    # ### end Alembic commands ###

    op.execute(sa.DDL("DROP FUNCTION column_update_not_allowed"))
