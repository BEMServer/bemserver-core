"""v0.21

Revision ID: 0.21
Revises: 0.15
Create Date: 2025-05-21 09:38:13.499755

"""

import enum

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0.21"
down_revision = "0.15"
branch_labels = None
depends_on = None


class PeriodEnum(enum.Enum):
    second = "second"
    minute = "minute"
    hour = "hour"
    day = "day"
    week = "week"
    month = "month"
    year = "year"


def upgrade():
    period_enum = postgresql.ENUM(PeriodEnum, name="periodenum")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tasks_by_campaigns",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("task_name", sa.String(), nullable=False),
        sa.Column("is_enabled", sa.Boolean(), nullable=False),
        sa.Column("campaign_id", sa.Integer(), nullable=False),
        sa.Column(
            "parameters", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("offset_unit", period_enum, nullable=False),
        sa.Column("start_offset", sa.Integer(), nullable=False),
        sa.Column("end_offset", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_id"],
            ["campaigns.id"],
            name=op.f("fk_tasks_by_campaigns_campaign_id_campaigns"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tasks_by_campaigns")),
    )
    op.drop_table("st_dl_weather_fcast_data_by_site")
    op.drop_table("st_cleanups_by_ts")
    op.drop_table("st_dl_weather_data_by_site")
    op.drop_table("st_cleanups_by_campaigns")
    op.drop_table("st_check_outliers_by_campaigns")
    op.drop_table("st_check_missing_by_campaigns")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "st_check_missing_by_campaigns",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("campaign_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_enabled", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_id"],
            ["campaigns.id"],
            name="fk_st_check_missing_by_campaigns_campaign_id_campaigns",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_st_check_missing_by_campaigns"),
        sa.UniqueConstraint(
            "campaign_id", name="uq_st_check_missing_by_campaigns_campaign_id"
        ),
    )
    op.create_table(
        "st_check_outliers_by_campaigns",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("campaign_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_enabled", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_id"],
            ["campaigns.id"],
            name="fk_st_check_outliers_by_campaigns_campaign_id_campaigns",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_st_check_outliers_by_campaigns"),
        sa.UniqueConstraint(
            "campaign_id", name="uq_st_check_outliers_by_campaigns_campaign_id"
        ),
    )
    op.create_table(
        "st_cleanups_by_campaigns",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("campaign_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_enabled", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_id"],
            ["campaigns.id"],
            name="fk_st_cleanups_by_campaigns_campaign_id_campaigns",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_st_cleanups_by_campaigns"),
        sa.UniqueConstraint(
            "campaign_id", name="uq_st_cleanups_by_campaigns_campaign_id"
        ),
    )
    op.create_table(
        "st_dl_weather_data_by_site",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("site_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_enabled", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["site_id"],
            ["sites.id"],
            name="fk_st_dl_weather_data_by_site_site_id_sites",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_st_dl_weather_data_by_site"),
        sa.UniqueConstraint("site_id", name="uq_st_dl_weather_data_by_site_site_id"),
    )
    op.create_table(
        "st_cleanups_by_ts",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("timeseries_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "last_timestamp",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["timeseries_id"],
            ["timeseries.id"],
            name="fk_st_cleanups_by_ts_timeseries_id_timeseries",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_st_cleanups_by_ts"),
        sa.UniqueConstraint("timeseries_id", name="uq_st_cleanups_by_ts_timeseries_id"),
    )
    op.create_table(
        "st_dl_weather_fcast_data_by_site",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("site_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_enabled", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["site_id"],
            ["sites.id"],
            name="fk_st_dl_weather_fcast_data_by_site_site_id_sites",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_st_dl_weather_fcast_data_by_site"),
        sa.UniqueConstraint(
            "site_id", name="uq_st_dl_weather_fcast_data_by_site_site_id"
        ),
    )
    op.drop_table("tasks_by_campaigns")
    # ### end Alembic commands ###

    period_enum = postgresql.ENUM(PeriodEnum, name="periodenum")
    period_enum.drop(op.get_bind())
